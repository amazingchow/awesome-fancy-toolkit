## clang-format version 6.0.0-1ubuntu2

Language: Cpp
# 可选项[ LLVM, Google, Chromium, Mozilla, WebKit, Microsoft, GNU ].
BasedOnStyle: LLVM
# The extra indent or outdent of access modifiers, e.g. public:.
AccessModifierOffset: -2
# 可选项[ Align, DontAlign, AlwaysBreak ].
AlignAfterOpenBracket: Align
# If true, align the assignment operators of consecutive lines.
AlignConsecutiveAssignments: false
# If true, align the declaration names of consecutive lines.
AlignConsecutiveDeclarations: false
# 可选项[ DontAlign, Left, Right ].
AlignEscapedNewlines: Left
# If true, horizontally align operands of binary and ternary expressions.
AlignOperands: true
# If true, aligns trailing comments.
AlignTrailingComments: true
# If the function declaration doesn’t fit on a line, allow putting all parameters of a function declaration onto the next line even if BinPackParameters is false.
AllowAllParametersOfDeclarationOnNextLine: true
# Dependent on the value, while (true) { continue; } can be put on a single line.
AllowShortBlocksOnASingleLine: false
# If true, short case labels will be contracted to a single line.
AllowShortCaseLabelsOnASingleLine: false
# 可选项[ None, InlineOnly, Empty, Inline, All ].
AllowShortFunctionsOnASingleLine: Empty
# If true, if (a) return; can be put on a single line.
AllowShortIfStatementsOnASingleLine: false
# If true, while (true) continue; can be put on a single line.
AllowShortLoopsOnASingleLine: false
# 可选项[ None, All, TopLevel, AllDefinitions, TopLevelDefinitions ].
AlwaysBreakAfterReturnType: None
# If true, always break before multiline string literals.
AlwaysBreakBeforeMultilineStrings: false
# The template declaration breaking style to use.
AlwaysBreakTemplateDeclarations: true
# If false, a function call’s arguments will either be all on the same line or will have one line each.
BinPackArguments: false
# If false, a function declaration’s or function definition’s parameters will either all be on the same line or will have one line each.
BinPackParameters: false
BraceWrapping:   
  AfterClass:            true
  AfterControlStatement: true
  AfterEnum:             true
  AfterFunction:         true
  AfterNamespace:        true
  AfterObjCDeclaration:  true
  AfterStruct:           true
  AfterUnion:            true
  AfterExternBlock:      true
  BeforeCatch:           true
  BeforeElse:            true
  IndentBraces:          true
  SplitEmptyFunction:    true
  SplitEmptyRecord:      true
  SplitEmptyNamespace:   true
# 可选项[ None, NonAssignment, All ].
BreakBeforeBinaryOperators: None
# 可选项[ Linux, Allman ].
BreakBeforeBraces: Linux
# If true, ternary operators will be placed after line breaks.
BreakBeforeTernaryOperators: true
# 可选项[ BeforeColon, BeforeComma, AfterColon ].
BreakConstructorInitializers: AfterColon
# Break after each annotation on a field in Java files.
BreakAfterJavaFieldAnnotations: true
# Allow breaking string literals when formatting.
BreakStringLiterals: false
ColumnLimit: 0
# A regular expression that describes comments with special meaning, which should not be split into lines or otherwise changed.
CommentPragmas: '^ IWYU pragma:'
# If true, consecutive namespace declarations will be on the same line. If false, each namespace is declared on a new line.
CompactNamespaces: false
# If the constructor initializers don’t fit on a line, put each initializer on its own line.
ConstructorInitializerAllOnOneLineOrOnePerLine: true
# The number of characters to use for indentation of constructor initializer lists as well as inheritance lists.
ConstructorInitializerIndentWidth: 4
# Indent width for line continuations.
ContinuationIndentWidth: 4
# If true, format braced lists as best suited for C++11 braced lists.
Cpp11BracedListStyle: true
# Disables formatting completely.
DisableFormat: false
# If true, clang-format adds missing namespace end comments and fixes invalid existing ones.
FixNamespaceComments: true
# A vector of macros that should be interpreted as foreach loops instead of as function calls.
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
# 可选项[ Preserve, Merge, Regroup ].
IncludeBlocks: Regroup
IncludeCategories:
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        3
  - Regex:           '<[[:alnum:].]+>'
    Priority:        4
  - Regex:           '.*'
    Priority:        1
# Specify a regular expression of suffixes that are allowed in the file-to-main-include mapping.
IncludeIsMainRegex: '(_test)?$'
# Indent case labels one level from the switch statement.
IndentCaseLabels: false
# 可选项[ None, AfterHash, BeforeHash ].
IndentPPDirectives: AfterHash
# The number of columns to use for indentation.
IndentWidth: 4
# Indent if a function definition or declaration is wrapped after the type.
IndentWrappedFunctionNames: false
# 可选项[ Leave, Single, Double ].
JavaScriptQuotes: Leave
# Whether to wrap JavaScript import/export statements.
JavaScriptWrapImports: true
# If true, the empty line at the start of blocks is kept.
KeepEmptyLinesAtTheStartOfBlocks: false
# A regular expression matching macros that start a block.
MacroBlockBegin: ''
# A regular expression matching macros that end a block.
MacroBlockEnd: ''
# The maximum number of consecutive empty lines to keep.
MaxEmptyLinesToKeep: 1
# 可选项[ None, Inner, All ].
NamespaceIndentation: None
# he number of characters to use for indentation of ObjC blocks.
ObjCBlockIndentWidth: 4
# Add a space after @property in Objective-C, i.e. use @property (readonly) instead of @property(readonly).
ObjCSpaceAfterProperty: false
# Add a space in front of an Objective-C protocol list, i.e. use Foo <Protocol> instead of Foo<Protocol>.
ObjCSpaceBeforeProtocolList: false
# The penalty for breaking around an assignment operator.
PenaltyBreakAssignment: 2
# The penalty for breaking a function call after call(.
PenaltyBreakBeforeFirstCallParameter: 19
# The penalty for each line break introduced inside a comment.
PenaltyBreakComment: 300
# The penalty for breaking before the first <<.
PenaltyBreakFirstLessLess: 120
# The penalty for each line break introduced inside a string literal.
PenaltyBreakString: 1000
# The penalty for each character outside of the column limit.
PenaltyExcessCharacter: 1000000
# Penalty for putting the return type of a function onto its own line.
PenaltyReturnTypeOnItsOwnLine: 60
# 可选项[ Left, Right, Middle ].
PointerAlignment: Left
# If true, clang-format will attempt to re-flow comments.
ReflowComments: false
# If true, clang-format will sort #includes.
SortIncludes: true
# If true, clang-format will sort using declarations.
SortUsingDeclarations: false
# If true, a space is inserted after C style casts.
SpaceAfterCStyleCast: false
# If true, a space will be inserted after the ‘template’ keyword.
SpaceAfterTemplateKeyword: false
# If false, spaces will be removed before assignment operators.
SpaceBeforeAssignmentOperators: true
# Defines in which cases to put a space before opening parentheses.
SpaceBeforeParens: ControlStatements
# If true, spaces may be inserted into ().
SpaceInEmptyParentheses: false
# The number of spaces before trailing line comments (// - comments).
SpacesBeforeTrailingComments: 3
# If true, spaces will be inserted after < and before > in template argument lists.
SpacesInAngles: false
# If true, spaces are inserted inside container literals (e.g. ObjC and Javascript array and dict literals).
SpacesInContainerLiterals: false
# If true, spaces may be inserted into C style casts.
SpacesInCStyleCastParentheses: false
# If true, spaces will be inserted after ( and before ).
SpacesInParentheses: false
# If true, spaces will be inserted after [ and before ]. Lambdas without arguments or unspecified size array declarations will not be affected.
SpacesInSquareBrackets: false
# Parse and format C++ constructs compatible with this standard.
# 可选项[ C++03, C++11, C++14, C++17, C++20, Latest, Auto ].
Standard: C++11
# The number of columns used for tab stops.
TabWidth: 4
# The way to use tab characters in the resulting file.
UseTab: Always